// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToDoFlow.Infrastructure.Context;

#nullable disable

namespace ToDoFlow.Infrastructure.Migrations
{
    [DbContext(typeof(ToDoFlowContext))]
    [Migration("20250228205632_First-Migration1")]
    partial class FirstMigration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ToDoFlow.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Home",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shopping",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Work",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ToDoFlow.Domain.Models.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CompleteAt")
                        .HasColumnType("datetime")
                        .HasColumnName("complete_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("name");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint")
                        .HasColumnName("priority");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("task_items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Clean all the dirty dishes, including plates, glasses, and utensils.",
                            Name = "Wash the dishes",
                            Priority = (byte)1,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vacuum the floors, mop the surfaces, and tidy up the rooms.",
                            Name = "Clean the house",
                            Priority = (byte)2,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Buy groceries including vegetables, fruits, bread, and milk.",
                            Name = "Grocery shopping",
                            Priority = (byte)3,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Buy new headphones and a phone charger.",
                            Name = "Electronics shopping",
                            Priority = (byte)0,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Finalize the report for the current project, including graphs and conclusions.",
                            Name = "Complete project report",
                            Priority = (byte)2,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Join the weekly team meeting to discuss project progress and goals.",
                            Name = "Attend team meeting",
                            Priority = (byte)1,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Go through and reply to important work-related emails.",
                            Name = "Check emails",
                            Priority = (byte)0,
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("ToDoFlow.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("password_hash");

                    b.Property<byte>("Profile")
                        .HasColumnType("tinyint")
                        .HasColumnName("profile");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            Name = "Admin",
                            Password = "$2a$11$ZVHygbDAmzxjzbIEOLPBluUfUToFaqskwUO4r7YzWQSlJJ9DWwKhq",
                            Profile = (byte)0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doloris@gmail.com",
                            Name = "Misumi Uika",
                            Password = "$2a$11$nmsDFSlnFp4QFOZ76qfBOeF4H7AxA2Tc6zASVRw/2..MqPELfZT6C",
                            Profile = (byte)1
                        });
                });

            modelBuilder.Entity("ToDoFlow.Domain.Models.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("refresh_token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_refresh_token", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Expiration = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RefreshToken = "",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Expiration = new DateTime(1986, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RefreshToken = "",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ToDoFlow.Domain.Models.Category", b =>
                {
                    b.HasOne("ToDoFlow.Domain.Models.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoFlow.Domain.Models.TaskItem", b =>
                {
                    b.HasOne("ToDoFlow.Domain.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ToDoFlow.Domain.Models.UserRefreshToken", b =>
                {
                    b.HasOne("ToDoFlow.Domain.Models.User", "User")
                        .WithOne("UserRefreshToken")
                        .HasForeignKey("ToDoFlow.Domain.Models.UserRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoFlow.Domain.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ToDoFlow.Domain.Models.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("UserRefreshToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
